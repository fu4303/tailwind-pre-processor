@function getColorPairs($rules, $classPrefix) {
  $colorPairs: ();

  $dashIndex: str-index($classPrefix, '-');

  $colorPairs: if(
    $dashIndex != null,
    map-get($colors, str-slice($classPrefix, $dashIndex + 1)),
    map-get($colors, 'common')
  );

  @return $colorPairs;
}

/// 
/// batch import utilities function
/// 
@mixin importUtilities($size: null) {

  @each $propAlias, $rules in $preset {
    $themePairs: map-get($theme, $propAlias);
    $variantList: map-get($variants, $propAlias);

    ///
    /// eg. overflow: {
    ///       overflow: 'overflow',
    ///       'overflow-x': 'overflow-x',
    ///       'overflow-y': 'overflow-y'
    ///     }
    /// $prefixes = overflow 'overflow-x' 'overflow-y'
    /// $properites = overflow 'overflow-x' 'overflow-y'
    /// 
    @if (type-of($rules) == 'map') {
      @each $prefix, $property in $rules {
        $colorPrefixes: ('backgroundColor', 'borderColor', 'textColor', 'placeholderColor', 'divideColor', 'gradientColorStops');

        @if (index($colorPrefixes, $propAlias) != null) {
          $colorPairs: getColorPairs($rules, $prefix);
          // @debug $colorPairs;
          @include color-generator($colorPairs, $variantList, $size, $prefix, $property, $propAlias);
        }

        @else {
          @include class-generator($themePairs, $variantList, $size, $prefix, $property, $propAlias);
        }

      }
    }
    
    @else {
      /// 
      /// eg. textAlign: text 'text-align'
      /// $prefix = text
      /// $property = text-align
      /// 
      $prefix: nth($rules, 1);
      $property: nth($rules, 2);

      @include class-generator($themePairs, $variantList, $size, $prefix, $property, $propAlias);
    }
  }

}

@include importUtilities(null);

// generate responsive utilities
@each $size, $width in $screens {
  $escaped-size: escape_leading_numbers($size);

  @media (min-width: $width) {
    @include importUtilities($escaped-size);
  }
}
