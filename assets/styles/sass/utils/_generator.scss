///
/// [Utility First Class (Sass Version)]
/// Function: generate the right selector.
/// @author {xiaoluoboding}
/// @param {string} $prefix
/// @param {string} $modifier
/// @param {string} $variant
/// @param {string} $size
/// @return {string}  - utility selector
///
@function get-selector($prefix, $modifier, $variant, $size, $property) {
  $spaceBetweenModifier: '> :not(template) ~ :not(template)';

  // replace modifier, turn 1/2 into 1\/2
  $escapedModifier: str-replace($modifier, '\/', '\\\/');
  // replace modifier, turn 0.5 into 0\.5
  $replacedModifier: str-replace($escapedModifier, '\.', '\\\.');
  // get positive or negative class
  $baseClass: if(
    str-begin-with($replacedModifier, '-'),
    str-join($prefix, '-', $replacedModifier),
    str-join('-', $prefix, $replacedModifier)
  );

  $rightModifier: if(
    $modifier == 'default',
    $prefix,
    $baseClass
  );

  $rightPrefix: if(
    $prefix == 'none',
    $modifier,
    $rightModifier
  );

  $rightVariant: if(
    $variant == null,
    $rightPrefix,
    $variant+'\\:'+$rightPrefix+':'+$variant
  );

  $rightSize: if(
    $size == null,
    $rightVariant,
    str-join('\\:', $size, $rightVariant)
  );

  $selector: if(
    str-index($prefix, 'divide') != null and $property == 'border-color',
    $rightSize + ' ' + $spaceBetweenModifier,
    $rightSize
  );

  @return $selector;
}

///
/// calc space / divide width
/// @author {xiaoluoboding}
/// @param {string} $size
/// @param {string} $value
/// @return {string}  - result
///
@function calc-width-value($size, $value) {
  $size-value: calc(#{$size} * #{$value});
  $result: if($value == '0', $value, $size-value);
  @return $result;
}

///
/// get the rgba color
/// @author {xiaoluoboding}
/// @param {hex color} $color
/// @param {string} $variable
/// @return {string}  - result eg: rgba(0, 0, 0, var(--bg-opacity));
///
@function rgba-color($color, $variable) {
  @return 'rgba('+red($color)+', '+green($color)+', '+blue($color)+', '+var($variable)+')';
}

/// 
/// loop theme pairs
/// 
@mixin loop-themes($themePairs, $size, $prefix, $property, $variant) {

  @each $modifier, $value in $themePairs {
    // get the right selector
    $selector: get-selector($prefix, $modifier, $variant, $size, $property);

    // @debug $selector;
  
    .#{$selector} {
      @if (type-of($property) == 'map') {
        // generate multiple line properties class
        @each $prop, $propValue in $property {
          #{$prop}: #{$value};
        }
      } @else {
        #{$property}: #{$value};
      }
    }
  }

}

/// 
/// loop placeholder
/// 
@mixin loop-placeholder($themePairs, $size, $prefix, $property, $variant, $propAlias) {
  $pseudoList: (':-ms-input-placeholder', '::-ms-input-placeholder', '::placeholder');

  @each $modifier, $value in $themePairs {
    // get the right selector
    $selector: get-selector($prefix, $modifier, $variant, $size, $property);

    @if (str-index($propAlias, 'Color')) {
      $propOpacity: str-replace($propAlias, 'Color', 'Opacity');

      $opacity-variable: #{nth(map-get($preset, $propOpacity), 2)};

      // @debug $selector;

      // generate multiple line properties class
      @each $pseudo in $pseudoList {
        .#{$selector}#{$pseudo} {
          @if ($modifier == 'transparent') or ($modifier == 'current') {
            #{$property}: #{$value};
          }

          @else {
            #{$opacity-variable}: 1;
            #{$property}: #{$value};
            #{$property}: #{rgba-color($value, $opacity-variable)}
          }
        }
      }
    }

    @else {
      // generate multiple line properties class
      @each $pseudo in $pseudoList {
        .#{$selector}#{$pseudo} {
          #{$property}: #{$value};
        }
      }
    }
  }
}

/// 
/// loop space between
/// 
@mixin loop-space-between($themePairs, $size, $prefix, $property, $variant, $propAlias) {

  @each $modifier, $value in $themePairs {
    // get the right selector
    $selector: get-selector($prefix, $modifier, $variant, $size, $property);

    // @debug $selector;
  
    // generate multiple line properties class
    .#{$selector} > :not(template) ~ :not(template) {
      @if (str-index($propAlias, 'Opacity')) {
        #{$property}: #{$value};
      }

      @else {
        @if (type-of($property) == 'map') {
          // generate multiple line properties class
          @if ($modifier == 'reverse') {
            $prop: --#{$prefix}-#{$modifier};
            #{$prop}: 1;
          } @else {
            @each $prop, $propValue in $property {
              $selectorValue: calc-width-value($value, $propValue);
              #{$prop}: #{$selectorValue};
            }
          }
        }
      }
    }
  }

}

/// 
/// loop variants
/// 
@mixin loop-variants($themePairs, $variantList, $size, $prefix, $property, $propAlias) {

  @each $variant in $variantList {
    @if ($variant != 'responsive') {
      @if (str-index($prefix, 'placeholder-opacity') !=null) {
        @include loop-placeholder($themePairs, $size, $prefix, $property, $variant, placeholderOpacity);
      }
      
      @else if (
        str-index($prefix, 'space-') !=null or
        str-index($prefix, 'divide-x') !=null or
        str-index($prefix, 'divide-y') !=null or
        str-index($prefix, 'divide-opacity') !=null
      ) {
        @include loop-space-between($themePairs, $size, $prefix, $property, $variant, $propAlias);
      }
      
      @else {
        @include loop-themes($themePairs, $size, $prefix, $property, $variant);
      }
    }
  }

}

@mixin class-generator($themePairs, $variantList, $size, $prefix, $property, $propAlias) {

  @if (str-index($prefix, 'placeholder-opacity') != null) {
    @include loop-placeholder($themePairs, $size, $prefix, $property, null, $propAlias);
  }

  @else if (
    str-index($prefix, 'space-') !=null or
    str-index($prefix, 'divide-x') !=null or
    str-index($prefix, 'divide-y') !=null or
    str-index($prefix, 'divide-opacity') !=null
  ) {
    @include loop-space-between($themePairs, $size, $prefix, $property, null, $propAlias);
  }
  
  @else {
    @include loop-themes($themePairs, $size, $prefix, $property, null);
  }

  @include loop-variants($themePairs, $variantList, $size, $prefix, $property, $propAlias);

}

@mixin loop-color-theme($themePairs, $size, $prefix, $property, $variant, $propAlias) {
  @each $modifier, $value in $themePairs {
    // get the right selector
    $selector: get-selector($prefix, $modifier, $variant, $size, $property);

    $propOpacity: str-replace($propAlias, 'Color', 'Opacity');
    
    $opacity-variable: #{nth(map-get($preset, $propOpacity), 2)};

    // @debug $selector;
  
    .#{$selector} {
      @if ($modifier=='transparent') or ($modifier=='current') {
        #{$property}: #{$value};
      }
      
      @else {
        #{$opacity-variable}: 1;
        #{$property}: #{$value};
        #{$property}: #{rgba-color($value, $opacity-variable)}
      }
    }
  }
}

@mixin loop-gradient-color($themePairs, $size, $prefix, $property, $variant, $propAlias) {
  @each $modifier, $value in $themePairs {
    // get the right selector
    $selector: get-selector($prefix, $modifier, $variant, $size, $property);

    .#{$selector} {
      @if ($modifier=='transparent') or ($modifier=='current') {
        #{$property}: #{$value};
      }
      
      @else {
        // transparent color function
        $transparentColor: scale-color($value, $alpha: -100%);

        @if (str-index($prefix, 'from')) {
          #{$property}: #{$value};
          --gradient-color-stops: var(--gradient-from-color),var(--gradient-to-color, #{$transparentColor});
        }
        @else if (str-index($prefix, 'via')) {
          #{$property}: #{$value};
          --gradient-color-stops: var(--gradient-from-color),var(--gradient-via-color),var(--gradient-to-color, #{$transparentColor});
        }
        @else {
          #{$property}: #{$value};
        }
      }
    }
  }
}

@mixin color-generator($themePairs, $variantList, $size, $prefix, $property, $propAlias) {
  @if (str-index($prefix, 'placeholder') != null) {
    @include loop-placeholder($themePairs, $size, $prefix, $property, null, $propAlias);
  }

  @else if ($propAlias == 'gradientColorStops') {
    @include loop-gradient-color($themePairs, $size, $prefix, $property, null, $propAlias);
  }

  @else {
    @include loop-color-theme($themePairs, $size, $prefix, $property, null, $propAlias);
  }

  @each $variant in $variantList {
    @if ($variant != 'responsive') {
      @if (str-index($prefix, 'placeholder') != null) {
        @include loop-placeholder($themePairs, $size, $prefix, $property, $variant, $propAlias);
      }

      @else if ($propAlias == 'gradientColorStops') {
        @include loop-gradient-color($themePairs, $size, $prefix, $property, $variant, $propAlias);
      }

      @else {
        @include loop-color-theme($themePairs, $size, $prefix, $property, $variant, $propAlias);
      }
    }
  }
}
