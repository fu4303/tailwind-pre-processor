/**
 * [Utility First Class (Less Version)]
 * Author: xiaoluoboding
 * Code for fun!
 */

// loop all properties
.loop-preset(@set, @size) {
  // eg. @variableProp: @fontSize
  // eg. @presetPairs: text 'font-size'
  each(@set, .(@presetPairs, @variableProp) {
    // eg. fontSize
    @propAlias: e(replace(@variableProp, '@', ''));

    @themePairs: @theme[@@propAlias];
    @variantList: @variants[@@propAlias];

    // when preset value is a map
    & when (length(@presetPairs) = 1) {
      // the @themePairs can be on of them: @spacing @negativeSpacing @colors
      each(@presetPairs, .(@property, @prefix) {
        & when (isstring(@property)) {
          .class-generator(
            @themePairs,
            @prefix,
            e(@property),
            @variantList,
            'both',
            @size
          );
        }

        // when property is a map
        & when not (isstring(@property)) {
          each(@property, .(@val, @key) {
            .class-generator(
              @themePairs,
              @prefix,
              @property,
              @variantList,
              'both',
              @size
            );
          })
        }
      })
    }
    
    // when preset value is a list
    & when not (length(@presetPairs) = 1) {
      @prefix: e(extract(@presetPairs, 1));
      @property: e(extract(@presetPairs, 2));

      .class-generator(
        @themePairs,
        @prefix,
        @property,
        @variantList,
        'both',
        @size
      );
    }
  })
}

.loop-preset(@preset, null);

// loop responsive variant
each(@screens, .(@value, @size, @index) {
  @width: e(@value);
  @media (min-width: @width) {
    .loop-preset(@preset, @size);
  }
});