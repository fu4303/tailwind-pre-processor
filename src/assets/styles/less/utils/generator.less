/**
 * [Utility First Class (Less Version)]
 * Utils: class-generator
 * [Author]: xiaoluoboding
 * [@param]: theme pairs
 * [@param]: preset pairs
 * [@param]: variants eg: responsive
 * [@param]: mode default/variant/both. default is both
 * Code for fun !
 */
 
.class-generator (@themePairs, @prefix, @property, @variantsList, @mode: 'both', @size: null) {
  // loop theme property
  .loop-themes (@themePairs, @prefix, @property, @variant, @i: 1) when (@i =< length(@themePairs)) {
    // extract theme pair
    @key: extract(extract(@themePairs, @i), 1);
    // input: '1/2' | output: 1\/2
    @modifier: if(isnumber(@key), e(@key), e(replace(~"@{key}", '\/', '\/')));
    @originValue: extract(extract(@themePairs, @i), 2);
    @value: e(@originValue);

    // extract perset pair
    // @prefix: e(extract(@prefix, @property, 1));
    // @property: e(extract(@prefix, @property, 2));

    // eg. isnumber(@key) and (@key < 0) ? -rotate-180 : rotate-180
    // eg. @prefix = none ? flex : gap-4
    // eg. @modifier = default ? shadow : shadow-sm
    @baseClass: if(
      isnumber(@key) and (@key < 0),
      ~"-@{prefix}@{modifier}",
      ~"@{prefix}-@{modifier}"
    );

    @rightPrefix: if(
      (@prefix = none),
      @modifier,
      @baseClass
    );

    @rightModifier: if(
      (@key = default),
      @prefix,
      @rightPrefix
    );

    @rightVariant: if( 
      (@variant = default),
      @rightModifier,
      ~"@{variant}\:@{rightModifier}:@{variant}"
    );

    @selector: if(
      (@size = null),
      @rightVariant,
      ~"@{size}\:@{rightVariant}"
    );

    .@{selector} {
      & when not (isstring(@property)) {
        each(@property, .(@val, @idx) {
          @properties: e(@val);
          @{properties}: @value;
        })
      }

      & when (isstring(@property)) {
        @{property}: @value;
      }
    }

    .loop-themes(@themePairs, @prefix, @property, @variant, (@i + 1));
  }

  // loop variants
  .loop-variants (@list, @j: 1) when (@j =< length(@list)) {
    @variant: extract(@list, @j);

    & when not (@variant = 'responsive') {
      .loop-themes(@themePairs, @prefix, @property, @variant);
    }

    .loop-variants(@list, @j + 1);
  }

  & when (@mode = 'default') {
    .loop-themes(@themePairs, @prefix, @property, default);
  }

  & when (@mode = 'variant') {
    .loop-variants(@variantsList);
  }

  & when (@mode = 'both') {
    .loop-themes(@themePairs, @prefix, @property, default);

    .loop-variants(@variantsList);
  }
}
