///
/// get the right selector
/// @author {xiaoluoboding}
/// @param {string} $prefix
/// @param {string} $modifier
/// @param {string} $variant
/// @param {string} $size
/// @return {string}  - right selector
///
@function get-selector($prefix, $modifier, $variant, $size) {
  // replace modifier, turn 1/2 into 1\/2
  $replacedModifier: str-replace($modifier, '\/', '\\\/');
  // get positive or negative class
  $baseClass: if(
    str-begin-with($replacedModifier, '-'),
    str-join($prefix, '-', $replacedModifier),
    str-join('-', $prefix, $replacedModifier)
  );

  $rightModifier: if(
    $modifier == 'default',
    $prefix,
    $baseClass
  );

  $rightPrefix: if(
    $prefix == 'none',
    $modifier,
    $rightModifier
  );

  $rightVariant: if(
    $variant == null,
    $rightPrefix,
    $variant+'\\:'+$rightPrefix+':'+$variant
  );

  $selector: if(
    $size == null,
    $rightVariant,
    str-join('\\:', $size, $rightVariant)
  );

  @return $selector;
}

///
/// calc space / divide width
/// @author {xiaoluoboding}
/// @param {string} $size
/// @param {string} $value
/// @return {string}  - result
///
@function calc-width-value($size, $value) {
  $size-value: calc(#{$size} * #{$value});
  $result: if($value == '0', $value, $size-value);
  @return $result;
}

/// 
/// loop theme pairs
/// 
@mixin loop-themes($themePairs, $size, $prefix, $property, $variant) {

  @each $modifier, $value in $themePairs {
    // get the right selector
    $selector: get-selector($prefix, $modifier, $variant, $size);

    @debug $selector;
  
    .#{$selector} {
      @if (type-of($property) == 'map') {
        // generate multiple line properties class
        @each $prop, $propValue in $property {
          #{$prop}: #{$value};
        }
      } @else {
        #{$property}: #{$value};
      }
    }
  }

}
/// 
/// loop placeholder
/// 
@mixin loop-placeholder($themePairs, $size, $prefix, $property, $variant) {
  $pseudoList: (':-ms-input-placeholder', '::-ms-input-placeholder', '::placeholder');

  @each $modifier, $value in $themePairs {
    // get the right selector
    $selector: get-selector($prefix, $modifier, $variant, $size);

    @debug $selector;
  
    // generate multiple line properties class
    @each $pseudo in $pseudoList {
      .#{$selector}#{$pseudo} {
        #{$property}: #{$value};
      }
    }
  }
}
/// 
/// loop space between
/// 
@mixin loop-space-between($themePairs, $size, $prefix, $property, $variant) {

  @each $modifier, $value in $themePairs {
    // get the right selector
    $selector: get-selector($prefix, $modifier, $variant, $size);

    @debug $selector;
  
    // generate multiple line properties class
    .#{$selector} > :not(template) ~ :not(template) {
      @if (type-of($property) == 'map') {
        // generate multiple line properties class
        @if ($modifier == 'reverse') {
          $prop: --#{$prefix}-#{$modifier};
          #{$prop}: 1;
        } @else {
          @each $prop, $propValue in $property {
            $selectorValue: calc-width-value($value, $propValue);
            #{$prop}: #{$selectorValue};
          }
        }
      }
    }
  }

}
/// 
/// loop divide-width
/// 
@mixin loop-divide-width($themePairs, $size, $prefix, $property, $variant) {

  @each $modifier, $value in $themePairs {
    // get the right selector
    $selector: get-selector($prefix, $modifier, $variant, $size);

    @debug $selector;
  
    // generate multiple line properties class
    .#{$selector} > :not(template) ~ :not(template) {
      @if (type-of($property) == 'map') {
        // generate multiple line properties class
        @if ($modifier == 'reverse') {
          $prop: --#{$prefix}-#{$modifier};
          #{$prop}: 1;
        } @else {
          @each $prop, $propValue in $property {
            $selectorValue: calc-width-value($value, $propValue);
            #{$prop}: #{$selectorValue};
          }
        }
      }
    }
  }

}
/// 
/// loop placeholder
/// 
@mixin loop-divide-color($themePairs, $size, $prefix, $property, $variant) {

  @each $modifier, $value in $themePairs {
    // get the right selector
    $selector: get-selector($prefix, $modifier, $variant, $size);

    @debug $selector;
  
    // generate multiple line properties class
    .#{$selector} > :not(template) ~ :not(template) {
      #{$property}: #{$value};
    }
  }

}

/// 
/// loop variants
/// 
@mixin loop-variants($themePairs, $variantList, $size, $prefix, $property) {

  @each $variant in $variantList {
    @if ($variant != 'responsive') {
      @if (str-index($prefix, 'placeholder') != null) {
        @include loop-placeholder($themePairs, $size, $prefix, $property, $variant);
      } @else if (str-index($prefix, 'space-') != null) {
        @include loop-space-between($themePairs, $size, $prefix, $property, $variant);
      } @else if (str-index($prefix, 'divide-x') != null or str-index($prefix, 'divide-y') != null) {
        @include loop-divide-width($themePairs, $size, $prefix, $property, $variant);
      } @else if (str-index($prefix, 'divide') != null and $property == 'border-color') {
        @include loop-divide-color($themePairs, $size, $prefix, $property, $variant);
      }  @else {
        @include loop-themes($themePairs, $size, $prefix, $property, $variant);
      }
    }
  }

}


@mixin class-generator($themePairs, $variantList, $size, $prefix, $property) {

  @if (str-index($prefix, 'placeholder') != null) {
    @include loop-placeholder($themePairs, $size, $prefix, $property, null);
  } @else if (str-index($prefix, 'space-') != null) {
    @include loop-space-between($themePairs, $size, $prefix, $property, null);
  } @else if (str-index($prefix, 'divide-x') != null or str-index($prefix, 'divide-y') != null) {
    @include loop-divide-width($themePairs, $size, $prefix, $property, null);
  } @else if (str-index($prefix, 'divide') != null and $property == 'border-color') {
    @include loop-divide-color($themePairs, $size, $prefix, $property, null);
  }   @else {
    @include loop-themes($themePairs, $size, $prefix, $property, null);
  }

  @include loop-variants($themePairs, $variantList, $size, $prefix, $property);

}
