/**
 * [Utility First Class (Stylus Version)]
 * Function: generate the right selector.
 * Author: xiaoluoboding
 * @param: {string} size - eg. sm / md / lg / xl
 * @param: {string} prefix - eg. text
 * @param: {string} modifier - eg. left / center / right / justifiy
 * @param: {string} variant - eg. hover / active
 * @return: utility selector
 */
getSelector(size, prefix, modifier, variant) {

  $baseSelector = match('^-', modifier) ? ('-' + prefix + modifier) : join('-', prefix, modifier)

  $rightModifier = (modifier == default) ? prefix : $baseSelector

  $rightPrefix = (prefix == none) ? modifier : $rightModifier

  $rightVariant = (variant is not null) ? (variant + "\:" + $rightPrefix + ":" + variant) : $rightPrefix

  $result = (size is not null) ? join('\:', size, $rightVariant) : $rightVariant

  return $result
}

/**
 * [Utility First Class (Stylus Version)]
 * Function: Utility class generator like tailwindcss but in pure stylus.
 * Author: xiaoluoboding
 * @Param: [$themePairs]
 *     eg: textAlign: {
             left: 'left',
             center: 'center',
             right: 'right',
             justify: 'justify'
           }
 * @Param: [[$variantList]]
 *     eg: textAlign: 'responsive'
 * @Param: [$size]
 *     eg: sm, md, lg, xl
 * @Param: [$prefix]
 *     eg: text
 * @Param: [$property]
 *     eg: text-align
 * Code for fun!
 */
class-generator($themePairs, $variantList, $size = null, $prefix, $property) {
  // loop theme pairs
  loop-themes($variant = null) {
    // p($variant)
    for key, value in $themePairs {
      // unquote theme pairs
      $modifier = replace('\/', '\/', key)
      $value = convent-string(value)
      
      $selector = getSelector($size, $prefix, $modifier, $variant)

      .{$selector} {
        if (typeof($property) is 'object') {
          // generate multiple line properties class
          for $prop in keys($property) {
            {$prop} $value
          }
        } else {
          // generate only one line property class
          {$property} $value
        } 
      }
    }
  }

  // loop placeholder
  loop-placeholder($variant = null) {
    // .placeholder-gray-color:-ms-input-placeholder
    // .placeholder-gray-color::-ms-input-placeholder
    // .placeholder-gray-color::placeholder
    $pseudoList = ':-ms-input-placeholder' '::-ms-input-placeholder' '::placeholder'
    for key, value in $themePairs {
      // unquote theme pairs
      $modifier = replace('\/', '\/', key)
      $value = convent-string(value)

      // seems like "placeholder-gray-color"
      $basicSelector = join('-', $prefix, $modifier)
      // seems like "sm\:placeholder-gray-color"
      $selector = ($size == null) ? $basicSelector : join('\:', $size, $basicSelector)
      // seems like "focus\:placeholder-gray-color:focus"
      $class = $variant == null ? $selector : ($variant + "\:" + $selector + ":" + $variant)
      
      for $pseudo in $pseudoList {
        // seems like .placeholder-gray-color::placeholder
        .{$class}{$pseudo} {
          {$property} $value
        }
      }
    }
  }

  if (match('^placeholder', $prefix)) {
    loop-placeholder()
  } else {
    loop-themes()
  }

  loop-variants() {
    for $variant in $variantList {
      if ($variant is not 'responsive') {
        if (match('^placeholder', $prefix)) {
          loop-placeholder($variant)
        } else {
          loop-themes($variant)
        }
      }
    }
  }

  loop-variants()
}
