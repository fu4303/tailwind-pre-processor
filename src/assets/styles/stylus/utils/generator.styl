/**
 * [Utility First Class (Stylus Version)]
 * Function: generate the right selector.
 * @author: xiaoluoboding
 * @param: {string} size - eg. sm / md / lg / xl
 * @param: {string} prefix - eg. text
 * @param: {string} modifier - eg. left / center / right / justifiy
 * @param: {string} variant - eg. hover / active
 * @return: {string} utility selector
 */
get-selector($size, $prefix, $modifier, $variant, $property) {
  $spaceBetweenModifier = '> :not(template) ~ :not(template)'

  $baseSelector = match('^-', $modifier) ? ('-' + $prefix + $modifier) : join('-', $prefix, $modifier)

  $rightModifier = ($modifier == default) ? $prefix : $baseSelector

  $rightPrefix = ($prefix == none) ? $modifier : $rightModifier

  $rightVariant = ($variant is not null) ? ($variant + "\:" + $rightPrefix + ":" + $variant) : $rightPrefix

  $rightSize = ($size is not null) ? join('\:', $size, $rightVariant) : $rightVariant

  $result = (match('^divide', $prefix) and ($property is 'border-color')) ? ($rightSize + ' ' + $spaceBetweenModifier) : $rightSize

  return $result
}

///
/// calc space / divide width
/// @author xiaoluoboding
/// @param {string} $size
/// @param {string} $value
/// @return {string}  - result
///
calc-width-value($size, $value) {
  $size-value = 'calc(%s * %s)' % ($size $value)
  $result = $value is '0' ? 0 : $size-value
  return $result
}

/**
 * [Utility First Class (Stylus Version)]
 * Function: Utility class generator like tailwindcss but in pure stylus.
 * @author: xiaoluoboding
 * @param: [$themePairs]
 *     eg: textAlign: {
             left: 'left',
             center: 'center',
             right: 'right',
             justify: 'justify'
           }
 * @param: [[$variantList]]
 *     eg: textAlign: 'responsive'
 * @param: [$size]
 *     eg: sm, md, lg, xl
 * @param: [$prefix]
 *     eg: text
 * @param: [$property]
 *     eg: text-align
 * Code for fun!
 */
class-generator($themePairs, $variantList, $size = null, $prefix, $property) {
  // loop theme pairs
  loop-themes($variant = null) {
    // p($variant)
    for key, value in $themePairs {
      // unquote theme pairs
      $modifier = replace('\/', '\/', key)
      $value = convent-string(value)
      
      $selector = get-selector($size, $prefix, $modifier, $variant, $property)

      .{$selector} {
        if (typeof($property) is 'object') {
          // generate multiple line properties class
          for $prop in keys($property) {
            {$prop} $value
          }
        } else {
          // generate only one line property class
          {$property} $value
        } 
      }
    }
  }

  // loop placeholder
  loop-placeholder($variant = null) {
    // .placeholder-gray-color:-ms-input-placeholder
    // .placeholder-gray-color::-ms-input-placeholder
    // .placeholder-gray-color::placeholder
    $pseudoList = ':-ms-input-placeholder' '::-ms-input-placeholder' '::placeholder'
    for key, value in $themePairs {
      // unquote theme pairs
      $modifier = replace('\/', '\/', key)
      $value = convent-string(value)

      // seems like "placeholder-gray-color"
      $basicSelector = join('-', $prefix, $modifier)
      // seems like "sm\:placeholder-gray-color"
      $selector = ($size == null) ? $basicSelector : join('\:', $size, $basicSelector)
      // seems like "focus\:placeholder-gray-color:focus"
      $class = $variant == null ? $selector : ($variant + "\:" + $selector + ":" + $variant)
      
      for $pseudo in $pseudoList {
        // seems like .placeholder-gray-color::placeholder
        .{$class}{$pseudo} {
          {$property} $value
        }
      }
    }
  }

  // loop space-between & divide-width
  loop-space-between($variant = null) {
    for key, value in $themePairs {
      // unquote theme pairs
      $modifier = replace('\/', '\/', key)
      $value = convent-string(value)

      // get the right selector
      $selector = get-selector($size, $prefix, $modifier, $variant, $property)

      .{$selector} > :not(template) ~ :not(template) {
        if (typeof($property) is 'object') {
          // generate multiple line properties class
          if ($modifier is 'reverse') {
            $prop = '--' + $prefix + '-' + $modifier
            {$prop} 1
          } else {
            for $prop, $propValue in $property {
              $selectorValue = calc-width-value($value, convent-string($propValue))
              {$prop} $selectorValue
            }
          }
        }
      }

    }
  }

  if (match('^placeholder', $prefix)) {
    loop-placeholder()
  } else if (match('^(space-|divide-x|divide-y)', $prefix)) {
    loop-space-between()
  } else {
    loop-themes()
  }

  loop-variants() {
    for $variant in $variantList {
      if ($variant is not 'responsive') {
        if (match('^placeholder', $prefix)) {
          loop-placeholder($variant)
        } else if (match('^(space-|divide-x|divide-y)', $prefix)) {
          loop-space-between($variant)
        } else {
          loop-themes($variant)
        }
      }
    }
  }

  loop-variants()
}
