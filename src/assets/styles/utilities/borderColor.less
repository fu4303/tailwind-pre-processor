/**
 * [Utility First Class (Less Version)]
 * Property: border-color
 * Author: xiaoluoboding
 * Code for fun!
 */

// generate one particular border-color
.border-class(@name, @common: false, @property: border-color) {
  @color-name: ~"@{name}-list";
  @color-list: @@color-name;
  @list-length: length(@color-list);
  @selector: e(@name);

  .bd-color(@color-list, @i: 1) when (@i <= @list-length) {
    @pair: extract(@color-list, @i);
    @key: extract(@pair, 1);
    @value: extract(@pair, 2);

    @modifier: e(@key);

    & when(@common = true) {
      .border-@{modifier} {
        @{property}: @value;
      }
    }

    & when (@common = false) {
      .border-@{selector}-@{modifier} {
        @{property}: @value;
      }
      .hover\:border-@{selector}-@{modifier}:hover {
        @{property}: @value;
      }
    }

    .bd-color(@color-list, @i + 1);
  }

  .bd-color(@color-list);
}

// generate all palette colors
.border-all(@palette, @i: 1) when (@i <=length(@palette)) {
  @color-name: extract(@palette, @i);

  // If this is the first iteration
  & when (@i = 1) {
    .border-class(@color-name, true);
  }

  & when (@i > 1) {
    .border-class(@color-name, false);
  }

  .border-all(@palette, @i + 1);
}

// default border, palette gray-300
.border {
  border: 0 solid extract(extract(@gray-list, 3), 2);
}

.border-all(@color-palette);
