/**
 * [Utility First Class (Less Version)]
 * Property: border-radius
 * Author: xiaoluoboding
 * Code for fun!
 */

@borderRadius:
  none 0,
  sm 0.125rem,
  default 0.25rem,
  md 0.375rem,
  lg 0.5rem,
  full 9999px
;

@borderCorner: all, t, r, b, l, tl, tr, br, bl;

.radiusPreset {
  .rounded(@corner, @val) {
    & when (@corner =all) {
      border-radius: @val;
    }

    & when (@corner =t) {
      border-top-left-radius: @val;
      border-top-right-radius: @val;
    }

    & when (@corner =r) {
      border-top-right-radius: @val;
      border-bottom-right-radius: @val;
    }

    & when (@corner =b) {
      border-bottom-right-radius: @val;
      border-bottom-left-radius: @val;
    }

    & when (@corner =l) {
      border-top-left-radius: @val;
      border-bottom-left-radius: @val;
    }

    & when (@corner =tl) {
      border-top-left-radius: @val;
    }

    & when (@corner =tr) {
      border-top-right-radius: @val;
    }

    & when (@corner =br) {
      border-bottom-right-radius: @val;
    }

    & when (@corner =bl) {
      border-bottom-left-radius: @val;
    }
  }
}

// generate default border-radius
.defaultBorderRadius (@m, @value) {
  // loop definition
  .g-radius(@list, @i: 1) when (@i <= length(@list)) {
    // extract the right direction from the list
    @corner: extract(@list, @i);

    // apply the property to the selector
    & when (@m = default) and (@i = 1) {
      .rounded {
        .radiusPreset.rounded(@corner, @value);
      }
    }
    & when not (@m = default) and (@i = 1) {
      .rounded-@{m} {
        .radiusPreset.rounded(@corner, @value);
      }
    }
    & when (@m = default) and (@i > 1) {
      .rounded-@{corner} {
        .radiusPreset.rounded(@corner, @value);
      }
    }
    & when not (@m = default) and (@i > 1) {
      .rounded-@{corner}-@{m} {
        .radiusPreset.rounded(@corner, @value);
      }
    }

    // recursive call for the next color
    .g-radius(@list, @i + 1);
  }

  // application
  .g-radius(@borderCorner);
}

.border-responsive (@array, @radius, @i: 1) when (@i <= length(@array)) {
  @screenKey: extract(extract(@array, @i), 1);

  @modifier: extract(@radius, 1);
  @value: extract(@radius, 2);

  @prefix: e(@screenKey);

  & when (@modifier = default) {
    .@{prefix}\:rounded {
      border-radius: @value;
    }
  }
  & when not (@modifier = default) {
    .@{prefix}\:rounded-@{modifier} {
      border-radius: @value;
    }
  }

  .border-responsive(@array, @radius, @i + 1);
}

.border-radius (@array, @i: 1) when (@i <= length(@array)) {
  @pair: extract(@array, @i);
  @key: extract(@pair, 1);
  @value: extract(@pair, 2);

  .defaultBorderRadius(@key, @value);

  .border-responsive(@screens, @pair);

  .border-radius(@array, (@i + 1));
}

.border-radius(@borderRadius);
