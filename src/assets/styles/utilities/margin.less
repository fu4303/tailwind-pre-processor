/**
 * [Utility First Class (Less Version)]
 * Property: margin
 * Author: xiaoluoboding
 * Code for fun!
 */

.margin-props(@list, @value, @p: 2) when (@p =< length(@list)) {
  @props: e(extract(@list, @p));

  .margin-props(@list, @value, @p + 1);

  @{props}: @value;
}

.margin-responsive(@screens, @i: 1) when (@i =< length(@screens)) {
  // extract screen pair
  @screenSize: e(extract(extract(@screens, @i), 1));
  @screenValue: e(extract(extract(@screens, @i), 2));

  @media (min-width: @screenValue) {
    .make-margin(@screenSize);
  }

  .margin-responsive(@screens, @i + 1);
}

.margin-preset(@modifier, @value, @variant, @negative) {
  .loop-presets(@array, @i: 1) when (@i =< length(@array)) {

    @prefix: extract(extract(@array, @i), 1);

    @presetList: extract(@array, @i);

    @selector: if((@negative = true), ~"-@{prefix}-@{modifier}", ~"@{prefix}-@{modifier}");

    @variantSelector: if((@variant = default),
      @selector,
      if((@variant = 'hover') or (@variant = 'focus'),
        ~"@{variant}\:@{selector}:@{variant}",
        ~"@{variant}\:@{selector}"));

    .@{variantSelector} {
      .margin-props(@presetList, @value);
    }

    .loop-presets(@array, @i + 1);
  }

  .loop-presets(@preset[@margin]);
}

.generate-margin(@array, @variant, @negative, @i: 1) when (@i =< length(@array)) {
  @pair: extract(@array, @i);
  @modifier: e(extract(@pair, 1));
  @value: extract(@pair, 2);

  & when (@negative = true) {
    .margin-preset(@modifier, 0 - @value, @variant, @negative);
  }

  & when (@negative = false) {
    .margin-preset(@modifier, @value, @variant, @negative);
  }

  .generate-margin(@array, @variant, @negative, (@i + 1));
}

// loop variants
.margin-variants(@list, @j: 1) when (@j =< length(@list)) {
  @variant: extract(@list, @j);

  & when (@variant = 'responsive') {
    // loop responsive presets
    .margin-responsive(@theme[@screens]);
  }

  & when (@variant = 'hover') {
    .make-margin(@variant)
  }

  & when (@variant = 'focus') {
    .make-margin(@variant)
  }

  .margin-variants(@list, @j + 1);
}

// generate default/variant margin
.make-margin(@variant) {
  // generate default margin class
  .generate-margin(@theme[@margin], @variant, false);

  // generate positive margin class
  .generate-margin(@theme[@negativeSpacing], @variant, false);

  // generate negative margin class
  .generate-margin(@theme[@negativeSpacing], @variant, true);
}

.make-margin(default);

.margin-variants(@variants[@padding]);
