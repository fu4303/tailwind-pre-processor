/**
 * [Utility First Class (Less Version)]
 * Property: margin
 * Author: xiaoluoboding
 * Code for fun!
 */

.margin-props(@list, @value, @p: 2) when (@p =< length(@list)) {
  @props: e(extract(@list, @p));

  .margin-props(@list, @value, @p + 1);

  @{props}: @value;
}

.margin-preset(@modifier, @value, @negative) {
  .loop-presets(@array, @i: 1) when (@i =< length(@array)) {

    @prefix: extract(extract(@array, @i), 1);

    @presetList: extract(@array, @i);

    @selector: if((@negative = true), ~"-@{prefix}-@{modifier}", ~"@{prefix}-@{modifier}");

    .@{selector} {
      .margin-props(@presetList, @value);
    }

    // loop variants
    .loop-variants (@list, @j: 1) when (@j =< length(@list)) {
      @variant: extract(@list, @j);

      & when (@variant = 'responsive') {
        // loop responsive presets
        @responsiveParams: @presetList @selector @value;
        .margin-responsive(@theme[@screens], @responsiveParams);
      }

      & when (@variant = 'hover') {
        .hover\:@{selector}:hover {
          .margin-props(@presetList, @value);
        }
      }

      & when (@variant = 'focus') {
        .focus\:@{selector}:focus {
          .margin-props(@presetList, @value);
        }
      }

      .loop-variants(@list, @j + 1);
    }

    .loop-variants(@variants[@margin]);

    .loop-presets(@array, @i + 1);
  }

  .loop-presets(@preset[@margin]);
}

.margin-responsive(@screens, @params, @i: 1) when (@i <= length(@screens)) {
  // extract screen pair
  @screenSize: e(extract(extract(@screens, @i), 1));

  // extract params
  @presetList: extract(@params, 1);
  @selector: extract(@params, 2);
  @value: extract(@params, 3);

  .@{screenSize}\:@{selector} {
    .margin-props(@presetList, @value);
  }

  .margin-responsive(@screens, @params, @i + 1);
}

.generate-margin(@array, @negative, @i: 1) when (@i =< length(@array)) {
  @pair: extract(@array, @i);
  @modifier: e(extract(@pair, 1));
  @value: extract(@pair, 2);

  & when (@negative = true) {
    .margin-preset(@modifier, 0 - @value, @negative);
  }

  & when (@negative = false) {
    .margin-preset(@modifier, @value, @negative);
  }

  .generate-margin(@array, @negative, (@i + 1));
}

// generate default margin class
.generate-margin(@theme[@margin], false);

// generate positive margin class
.generate-margin(@theme[@negativeSpacing], false);

// generate negative margin class
.generate-margin(@theme[@negativeSpacing], true);
